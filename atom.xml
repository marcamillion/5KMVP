<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[MVPs for just $5k.]]></title>
  <link href="http://marcamillion.github.io/5KMVP/atom.xml" rel="self"/>
  <link href="http://marcamillion.github.io/5KMVP/"/>
  <updated>2013-09-17T17:05:43-05:00</updated>
  <id>http://marcamillion.github.io/5KMVP/</id>
  <author>
    <name><![CDATA[Marc Gayle]]></name>
    <email><![CDATA[newprojects@5KMVP.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redefining MVP to Minimum Valuable Product]]></title>
    <link href="http://marcamillion.github.io/5KMVP/blog/2013/09/17/redefining-mvp-minimum-valuable-product/"/>
    <updated>2013-09-17T03:12:00-05:00</updated>
    <id>http://marcamillion.github.io/5KMVP/blog/2013/09/17/redefining-mvp-minimum-valuable-product</id>
    <content type="html"><![CDATA[<p>Given our experience working with many clients building MVPs, I have made a few observations about using the term &ndash; that lead me to think that a re-definition may be in order.</p>

<h3>1st Observation: The term is too geeky</h3>

<p>Due to the name of <a href="http://5kmvp.com">my business</a>, I can&rsquo;t run away from explaining what an MVP is. Anyone that I have to explain this to, I have to usually explain how a web product is different than a web site. Then I have to explain what a &lsquo;viable product&rsquo; is. Then I add the minimum portion of it &ndash; to emphasize the ability to get to market quickly to test the hypothesis re: the viability of the product. Viability sounds overly complicated and takes &lsquo;non-tech-startup&rsquo; people a significant amount of time to conceptually wrap their brains around determining whether a product is &lsquo;viable&rsquo;.</p>

<p>I think that is largely because the &lsquo;viability&rsquo; in the MVP sense captures 2 concepts in 1. In order for a product to be viable, it must be valuable to someone first. Then some reasonable portion of the market must be willing to pay for it. If a product is valuable to literally 1 person, then for all intents and purposes it doesn&rsquo;t matter how much they are willing to pay for it &ndash; even $1B &ndash; it almost makes no rational sense to pursue it. A market size of 1 is basically no market &ndash; even if that 1 is the US Gov&rsquo;t (from my perspective anyway). So you have to grok the valuable part and the market size part &ndash; in 1 word.</p>

<h3>2nd Observation: Seeking value is under emphasised</h3>

<p>Due to the fact that &lsquo;Value&rsquo; is not in the name Minimum Viable Product, it is quite often overlooked by entrepreneurs. They know that to validate a hypothesis, they have to find some potential clients willing to pay for it. However, because they focus on just the exchange of money or even the &lsquo;minimum&rsquo; allure of creating a handful of features, they don&rsquo;t quite understand/hone-in on the &lsquo;value concept&rsquo; of what they are building. In other words, when you ask them&hellip;how does what you are creating add value for your potential customers &ndash; they can&rsquo;t say explicitly articulate what their value is.</p>

<p>The average web developer doesn&rsquo;t fully understand (and can&rsquo;t quantify/articulate) their value.</p>

<blockquote><p>For us, the value we provide is peace-of-mind by reducing your risk. We guarantee you a working MVP for a flat fee of $5K.</p></blockquote>

<p>Determining true value is a particularly tricky exercise, because it is hard to articulate. Someone doesn&rsquo;t buy a fan because it has 3, 4, or 5 blades&hellip;.they buy a fan because it can keep them cool, at a significantly lower cost than an A/C and with much less stress/work than fanning themselves. If a fan has 1 million blades, but doesn&rsquo;t keep the subject cool&hellip;it won&rsquo;t last in the marketplace &ndash; unless there is some other magic that provides some imputed value that the creator didn&rsquo;t anticipate (e.g. perhaps the cost of the fan is less than the value of some of the components &ndash; <a href="http://www.quora.com/Business/Whats-the-shrewdest-smartest-maneuver-youve-ever-seen-in-business/answer/David-Fry?srid=FZe&share=1">hey&hellip;it has happened</a>).</p>

<h3>3rd Observation: Without capturing value, the product will never be viable</h3>

<p>If a product doesn&rsquo;t provide some value, then people will not use it over the long-term. People, especially early adopters, will try your product when they just hear about it&hellip;but if it doesn&rsquo;t provide some value to them&hellip;they will not use it consistently over time.</p>

<p>The most important thing about surviving is not just providing value, but capturing some amount of the value you create. That&rsquo;s the only way to be viable over the long-term. Once you know how much value you create, then you can figure out a way to capture that value.</p>

<h3>4th Observation: You need to figure out your &lsquo;Value Delta&rsquo;</h3>

<blockquote><p>Value Delta = The Amount of Value You Create &ndash; The Amount of  Value You Charge</p>

<p>Value Surplus = A positive Value Delta</p>

<p>Value Deficit = A negative Value Delta</p></blockquote>

<p>If you create a product that on average makes your best customer segment $1M+/year each, you are doing them a MAJOR disservice by charging just $120/year. The reason is that your incentives are misaligned. In order for you to be sustainable you have to focus on getting many customers and building an organization around trying to optimize for acquiring multiple customers &ndash; whereas those customers that receive $1M+/year of value will likely want you to focus more on improving the product and providing support. If they are just paying you $120/year, you can&rsquo;t do that right off the bat &ndash; therefore you begin to erode your Value Delta.</p>

<p>In this case, you and they, would be much better off if you charged them $120K/year. That would allow you to focus on improving the product and adding more value to your existing customers than chasing down every new customer.</p>

<p>In a theoretical world, a rational customer should want to pay up to $999K/year for your product, because they would still be net-ahead. Now&hellip;I wouldn&rsquo;t advise that, obviously, because it gets harder to justify a small value-delta. The larger the value-delta, the more compelling your product offering&hellip;up to a point. So the trick is to balance that value-delta such that the value-surplus is compelling enough for the customer to want to use your product &ndash; and that you can build a sustainable business supporting that value-surplus around.</p>

<p>You want to stay away from Value Deficit territory &ndash; assuming you want to build something for the long-run.</p>

<hr />

<p>So, I think the industry needs to re-focus on the value creation portion of an MVP &ndash; because that is the only thing that will get the product to product-market-fit. Re-defining the default term is just the first step. You would be surprised how difficult it is to get at the value being created by a product. It&rsquo;s not as straight forward as it sounds.</p>

<p>I will be writing a few more posts on Value over the next few days, so stay tuned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analysis of Market Demand for Web Programming Languages]]></title>
    <link href="http://marcamillion.github.io/5KMVP/blog/2013/01/01/analysis-of-market-demand-for-web-programming-languages/"/>
    <updated>2013-01-01T00:30:00-05:00</updated>
    <id>http://marcamillion.github.io/5KMVP/blog/2013/01/01/analysis-of-market-demand-for-web-programming-languages</id>
    <content type="html"><![CDATA[<p>  A few months ago, I got the idea that one way to get leads for remote freelance gigs was to scour Craigslist. So, after doing the manual work of &lsquo;crawling&rsquo; through at least 100 job postings by hand, I wrote a Ruby script to do the heavy lifting and filtering for me.</p>

<p>  Once I started looking through the data, some interesting things started jumping out at me. Even though I don&rsquo;t actually live in the Valley (I live in Jamaica), I consume a lot of the news, blog posts and articles that come from the Valley. Suffice it to say, I am affected by the &lsquo;Valley echo-chamber&rsquo;. One side effect of that is an obsession with Ruby and Rails as my development stack&hellip;and a general expectation that the rest of the world has woken up to the beauty and elegance that is Ruby &amp; Rails.</p>

<p>Alas, much to my surprise, that is not the case.</p>

<p>Before diving into the data, let me explain exactly what this script does. Throughout Craigslist, there are two URL subpaths that tend to have the majority of the web development freelance gigs &ndash; /cpg/ and /web/.</p>

<p>So the script creates a list of all the cities on Craigslist (because CL doesn&rsquo;t provide a clean, RESTful API that allows you to get this info easily) and then simply adds /cpg/ and /web/ to the end of that URL.</p>

<p>  Then, on each link it checks to see if the current link actually has gigs posted in that city. The reason for this is that whenever there is no gig posted in the current city, what CL does is shows gigs from &lsquo;Nearby cities&rsquo;. To prevent duplication, the script automagically checks for that and eliminates those cities that don&rsquo;t have &lsquo;uniquely posted&rsquo; gigs. However, it does not eliminate a gig that has the exact text and posted in two different cities &ndash; because, well&hellip;I hadn&rsquo;t gotten there yet.</p>

<p>  Once the script has a list of &lsquo;valid&rsquo; cities with gigs posted, then it starts to parse each of the links on the first page of those cities (i.e. up to 100 links in each city &ndash; CL does pagination by the 100 links) for keywords that I specified. The upside to only using the last 100 links in each city is that those are most recent. The downside is that in active cities, the last 100 isn&rsquo;t always a good sample from the entire population.</p>

<p>  For the Rails results, I have the following keywords: &ldquo;rails, (ruby on rails), (ruby on rails 3), (rails 3), (rails 2)&rdquo;.</p>

<p>  For the Ruby results, I have the following keywords: &ldquo;ruby, (ruby 1.8.7), (ruby 1.9.2), (ruby 1.9.3), ruby187, ruby192, ruby193&rdquo;.</p>

<p>  The searches are case-insensitive &ndash; so any link containing Ruby, rUbY or RUBY will be found and included.</p>

<p>  I am trying to capture every permutation that someone would use &lsquo;Rails&rsquo; in a web dev sense.</p>

<p>  The downside to this &lsquo;basic&rsquo; approach is that for technologies that share similar keywords &ndash; e.g. &lsquo;Ruby on Rails&rsquo; (the framework) and Ruby (the language) &ndash; there will be overlap. So in this case, the Ruby results contain a ton of Rails links. i.e. Rails is basically a subset of Ruby.</p>

<p>  I have done my best to fine-tune as many obviously spam-like CL posts out of the results, to really get at the legitimate posts.</p>

<p> <strong>So it is fair to say, I think, that these results give us a relative proxy for what the marketplace for freelance programming gigs are actually looking for.</strong></p>

<p>  Without further ado, here is the data and analysis.</p>

<h4>General Stats</h4>

<ul>
<li>Cities Parsed: 720</li>
<li>Total Gigs Found: 11,992 &ndash; 12,076 (footnote: scripts were run multiple times &ndash; for accuracy purposes &ndash; and the results returned were within this range)</li>
<li>Time Script Takes to Run: 16 mins &ndash; 1.25 hrs</li>
</ul>


<h4>Languages Searched For</h4>

<h5>Server-Side Languages &amp; Frameworks</h5>

<ul>
<li>C# (C-Sharp)</li>
<li>CodeIgniter (PHP Framework)</li>
<li>Django (Python Framework)</li>
<li>Dot-Net</li>
<li>Java</li>
<li>Lisp</li>
<li>Perl</li>
<li>PHP</li>
<li>Python</li>
<li>Rails (Ruby Framework)</li>
<li>Ruby</li>
</ul>


<h5>Client-Side Languages &amp; MVC Frameworks</h5>

<p>Batch 1 &ndash; Languages</p>

<ul>
<li>HTML</li>
<li>CSS</li>
<li>Javascript</li>
<li>Flash</li>
</ul>


<p>Batch 2 &ndash; Javascript MVC Frameworks</p>

<ul>
<li>Backbone.js</li>
<li>Closure</li>
<li>Ember.js</li>
<li>Knockout.js</li>
<li>Node.js</li>
</ul>


<p><img src="http://marcamillion.github.io/5KMVP/images/posts/2013/01/TC-Server-Side-Language-Demand-Distribution-Graph.PNG" title="Server Side Language Demand Distribution Graph" ></p>

<p><img src="http://marcamillion.github.io/5KMVP/images/posts/2013/01/TC-Server-Side-Language-Demand-Distribution-Table.PNG" title="Server Side Language Demand Distribution Table" ></p>

<p>On the server side, you can see that PHP wins by a long shot &ndash; with an almost <a href="http://www.youtube.com/watch?v=2O7K-8G2nwU">Bolt-like</a> performance, blowing everybody else out of the water. In fact, Ruby comes in at a paltry 5th place, Java coming in at 2nd and Dot-Net and C# coming in 3rd and 4th respectively.</p>

<p><img src="http://marcamillion.github.io/5KMVP/images/posts/2013/01/TC-Client-Side-Language-1-Demand-Distribution-Graph.PNG" title="Client Side Language 1 Demand Distribution Graph" ></p>

<p><img src="http://marcamillion.github.io/5KMVP/images/posts/2013/01/TC-Client-Side-Language-1-Demand-Distribution-Table.PNG" title="Client Side Language 1 Demand Distribution Table" ></p>

<p>The most surprising result from the above is that Flash is still in demand &ndash; with all the &ldquo;Flash is dead&rdquo; rhetoric flying around the tech presses and blogs. Almost as much in demand as Javascript! Who woulda thunk?!?</p>

<p><img src="http://marcamillion.github.io/5KMVP/images/posts/2013/01/TC-Client-Side-Language-2-Demand-Distribution-Graph.PNG" title="Client Side Language 2 Demand Distribution Graph" ></p>

<p><img src="http://marcamillion.github.io/5KMVP/images/posts/2013/01/TC-Client-Side-Language-2-Demand-Distribution-Table.PNG" title="Client Side Language 2 Demand Distribution Table" ></p>

<p>As for the Javascript frameworks, there is a silent battle going on with the multitudes of Javascript frameworks in existence and being released regularly. Here is where the unscientific-ness and impreciseness of this little exercise rears it&rsquo;s head again. Upon first glance of the results, the script says that Ember had an <a href="https://github.com/marcamillion/craigslist-ruby-crawler/blob/master/output/client-side/ember-gigs-Sep-28-2012.html#L2">output of 14 gigs</a>. However, because the keyword being searched for is &lsquo;ember&rsquo;, what happens is that Ruby finds any string with a substring of &lsquo;ember&rsquo;. So it had <a href="https://github.com/marcamillion/craigslist-ruby-crawler/blob/master/output/client-side/ember-gigs-Sep-28-2012.html">14 links</a> with &lsquo;Member&rsquo; and &lsquo;Membership&rsquo; in the link title. Not one with Ember.js or the Ember we were looking for. So after I manually reviewed the links, 0 results were returned. So the only two client-side MVC frameworks that the script found that is in-demand is Backbone and Node. Both, just barely.</p>

<p>That being said, please take that with a grain of salt. Here is an alternative data point for you.</p>

<p>I was told by one of the founders of <a href="http://grouptalent.com">GroupTalent</a> a few months ago, that the largest demand from clients they are seeing is in-fact for client-side JS frameworks. Even more so than server-side frameworks.</p>

<p>Here is all the data altogether.</p>

<p><img src="http://marcamillion.github.io/5KMVP/images/posts/2013/01/TC-Language-Demand-Distribution-Graph.PNG" title="Language Demand Distribution Graph" ></p>

<p><img src="http://marcamillion.github.io/5KMVP/images/posts/2013/01/TC-Language-Demand-Distribution-Table.PNG" title="Language Demand Distribution Table" ></p>

<h3>Conclusion</h3>

<p>This post is not meant to start a flamewar between the various camps. It is just an unscientific analysis of what the general marketplace (using Craigslist as a proxy for that marketplace) is looking for in web development talent.</p>

<p>If you are considering learning one of these languages or frameworks, using what the marketplace requests is one factor to weigh in your decision making process. I wouldn&rsquo;t necessarily encourage that though, I certainly didn&rsquo;t.</p>

<p>I chose Ruby &amp; Rails and love every minute of it. I would encourage you to try out various languages and see which you feel most comfortable with &ndash; because the vast majority of the time you spend in the language (assuming you really want to get better) will be non-billable stuff.</p>

<p>In the <a href="http://5kmvp.com">web applications I build</a> for clients at 5KMVP, I use Ruby &amp; Rails because that&rsquo;s what I love. Clients have been satisfied and seem to love it too.</p>

<p>If you want me to do an analysis of anything else &ndash; say Mobile vs Server languages or anything else, let me know in the comments or drop me a line on <a href="http://twitter.com/marcgayle">Twitter</a>.</p>

<p>If you found this interesting, you may find a piece <a href="http://marcgayle.com/how-dropbox-is-printing-money">I wrote about Dropbox</a>, or a <a href="http://marcgayle.com/hackers-guide-to-cashflow-vs-profit">guide to understanding cashflow vs profit</a>, similarly interesting.</p>

<p>You can find the Ruby script I created <a href="https://github.com/marcamillion/craigslist-ruby-crawler">on Github<a/>, along with some <a href="https://github.com/marcamillion/craigslist-ruby-crawler/tree/master/output">sample output files</a> that have a list of all the gigs generated for this article.</p>

<p>Do look around and if you submit any pull requests for any improvements you may have, the Karma Fairy shall multiply your lineage ten-fold and your seed shall outnumber the celestial bodies.</p>
]]></content>
  </entry>
  
</feed>
